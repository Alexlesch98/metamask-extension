diff --git a/dist/index.d.ts b/dist/index.d.ts
index b1319a340c03e201f8f19715d591988b538bc794..c68fc4dbadb0136d866c8a002a51381b35bed36e 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,6 +1,6 @@
 export * from './TransactionController';
 export type { EtherscanTransactionMeta } from './utils/etherscan';
-export { isEIP1559Transaction } from './utils/utils';
+export { isEIP1559Transaction, normalizeTxParams } from './utils/utils';
 export * from './types';
 export { determineTransactionType } from './utils/transaction-type';
 export { mergeGasFeeEstimates } from './utils/gas-flow';
diff --git a/dist/index.js b/dist/index.js
index b48c4bbdad703206b9d5ce3df1bc2d7d174cdf6f..67d261631f2d64d5b44b2206705df8e5da036379 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -14,10 +14,11 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
     for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.mergeGasFeeEstimates = exports.determineTransactionType = exports.isEIP1559Transaction = void 0;
+exports.mergeGasFeeEstimates = exports.determineTransactionType = exports.normalizeTxParams = exports.isEIP1559Transaction = void 0;
 __exportStar(require("./TransactionController"), exports);
 var utils_1 = require("./utils/utils");
 Object.defineProperty(exports, "isEIP1559Transaction", { enumerable: true, get: function () { return utils_1.isEIP1559Transaction; } });
+Object.defineProperty(exports, "normalizeTxParams", { enumerable: true, get: function () { return utils_1.normalizeTxParams; } });
 __exportStar(require("./types"), exports);
 var transaction_type_1 = require("./utils/transaction-type");
 Object.defineProperty(exports, "determineTransactionType", { enumerable: true, get: function () { return transaction_type_1.determineTransactionType; } });
diff --git a/dist/utils/utils.d.ts b/dist/utils/utils.d.ts
index b2ab10434f29503a544d784b75b0809c80efa4f9..b0c47e79881822278214c9243bf9a83b8c88d17c 100644
--- a/dist/utils/utils.d.ts
+++ b/dist/utils/utils.d.ts
@@ -55,4 +55,12 @@ export declare function normalizeTxError(error: Error & {
  * @returns An object containing normalized gas fee values.
  */
 export declare function normalizeGasFeeValues(gasFeeValues: GasPriceValue | FeeMarketEIP1559Values): GasPriceValue | FeeMarketEIP1559Values;
+/**
+ * Ensure a hex string is of even length by adding a leading 0 if necessary.
+ * Any existing `0x` prefix is preserved but is not added if missing.
+ *
+ * @param hex - The hex string to ensure is even.
+ * @returns The hex string with an even length.
+ */
+export declare function padHexToEvenLength(hex: string): string;
 //# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/dist/utils/utils.js b/dist/utils/utils.js
index 0d0cb63a30f1ec07f926adebecee8d7c1639ff03..62bf5a2899f62e8d76a676bb008204eeabb62f2b 100644
--- a/dist/utils/utils.js
+++ b/dist/utils/utils.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.normalizeGasFeeValues = exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.padHexToEvenLength = exports.normalizeGasFeeValues = exports.normalizeTxError = exports.validateIfTransactionUnapproved = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const utils_1 = require("@metamask/utils");
 const types_1 = require("../types");
@@ -8,7 +8,7 @@ exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
 // TODO: Replace `any` with type
 // eslint-disable-next-line @typescript-eslint/no-explicit-any
 const NORMALIZERS = {
-    data: (data) => (0, utils_1.add0x)(data),
+    data: (data) => (0, utils_1.add0x)(padHexToEvenLength(data)),
     from: (from) => (0, utils_1.add0x)(from).toLowerCase(),
     gas: (gas) => (0, utils_1.add0x)(gas),
     gasLimit: (gas) => (0, utils_1.add0x)(gas),
@@ -144,4 +144,18 @@ function normalizeGasFeeValues(gasFeeValues) {
     };
 }
 exports.normalizeGasFeeValues = normalizeGasFeeValues;
+/**
+ * Ensure a hex string is of even length by adding a leading 0 if necessary.
+ * Any existing `0x` prefix is preserved but is not added if missing.
+ *
+ * @param hex - The hex string to ensure is even.
+ * @returns The hex string with an even length.
+ */
+function padHexToEvenLength(hex) {
+    const prefix = hex.toLowerCase().startsWith('0x') ? hex.slice(0, 2) : '';
+    const data = prefix ? hex.slice(2) : hex;
+    const evenData = data.length % 2 === 0 ? data : `0${data}`;
+    return prefix + evenData;
+}
+exports.padHexToEvenLength = padHexToEvenLength;
 //# sourceMappingURL=utils.js.map
\ No newline at end of file
